{{ if or .Values.internalDatastore .Values.seperateInternalELKStack}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elastic-helper
spec:
  selector:
    matchLabels:
      app: assemblyline
      section: core
      component: elastic-helper
  serviceName: elastic-helper
  replicas: 1
  template:
    metadata:
      labels:
        app: assemblyline
        section: core
        component: elastic-helper
        {{ include "assemblyline.coreLabels" . | indent 8 }}
    spec:
      terminationGracePeriodSeconds: 10
      serviceAccountName: {{ .Values.coreServiceAccountName }}
      priorityClassName: al-infra
      securityContext:
        {{ include "assemblyline.coreSecurityContext" . | indent 8 }}
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      affinity:
        nodeAffinity:
          {{ include "assemblyline.nodeAffinity" . | indent 10 }}
      tolerations:
        {{ include "assemblyline.tolerations" . | indent 8 }}
      containers:
      - name: elastic-helper
        image: {{ .Values.assemblylineUIImage }}:{{ .Values.release }}
        command: ["python",  "/mount/share_certificate.py"]
        securityContext:
          {{ include "assemblyline.coreSecurityContext" . | indent 10 }}
        ports:
        - containerPort: 8000
        env:
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: elastic-helper-secret
                key: password
        volumeMounts:
        - name: certificate-data
          mountPath: /data/
        - name: script-volume
          mountPath: /mount
        resources:
          limits:
            cpu: {{ .Values.elasticHelperLimCPU }}
            memory: {{ .Values.elasticHelperLimRam }}
          requests:
            cpu: {{ .Values.elasticHelperReqCPU }}
            memory: {{ .Values.elasticHelperReqRam }}
      initContainers:
      - name: create-certs
        image: {{ .Values.datastore.image }}:{{ .Values.datastore.imageTag }}
        command: [ 'bash', '-c', "if [ ! -f /data/elastic-certificates.p12 ]; then mkdir /tmp/certs/ && elasticsearch-certutil ca --out /tmp/certs/elastic-stack-ca.p12 --pass '' && elasticsearch-certutil cert --name security-master --dns security-master --ca /tmp/certs/elastic-stack-ca.p12 --pass '' --ca-pass '' --out /tmp/certs/elastic-certificates.p12 && mv -n /tmp/certs/* /data/; ls -la /data/; fi" ]
        securityContext:
          {{ include "assemblyline.coreSecurityContext" . | indent 10 }}
        resources:
          limits:
            cpu: {{ .Values.elasticHelperLimCPU }}
            memory: {{ .Values.elasticHelperLimRam }}
          requests:
            cpu: {{ .Values.elasticHelperReqCPU }}
            memory: {{ .Values.elasticHelperReqRam }}
        volumeMounts:
          - name: certificate-data
            mountPath: /data/
          - name: script-volume
            mountPath: /mount/
      volumes:
        - name: script-volume
          configMap:
            name: {{ .Release.Name }}-bootstrap-script
            items:
              - key: share_certificate.py
                path: share_certificate.py
  volumeClaimTemplates:
  - metadata:
      name: certificate-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.persistantStorageClass }}
      resources:
        requests:
          storage: 1Gi
{{ end }}
